const fs = require('fs');
const path = require('path');

// ƒê·ªçc file exam-3.txt v√† chuy·ªÉn ƒë·ªïi th√†nh JSON
function convertExamToJson() {
    try {
        // ƒê·ªçc n·ªôi dung file
        const examContent = fs.readFileSync('exam-3.txt', 'utf8');
        
        // T√°ch t·ª´ng c√¢u h·ªèi b·∫±ng c√°ch t√¨m pattern s·ªë + d·∫•u ch·∫•m
        const questionBlocks = examContent.split(/(?=\n\d+\.)/);
        
        const questions = [];
        let questionId = 1;
        
        for (let block of questionBlocks) {
            block = block.trim();
            if (!block) continue;
            
            const lines = block.split('\n').map(line => line.trim()).filter(line => line);
            if (lines.length === 0) continue;
            
            // T√¨m c√¢u h·ªèi (d√≤ng ƒë·∫ßu ti√™n)
            const questionLine = lines[0];
            const questionMatch = questionLine.match(/^\d+\.\s*(.*)/);
            
            if (!questionMatch) continue;
            
            const questionText = questionMatch[1];
            const options = [];
            let answer = "";
            
            // T√¨m c√°c option v√† answer
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i];
                
                // Ki·ªÉm tra n·∫øu l√† option (A, B, C, D)
                if (line.match(/^[A-D]\.\s*/)) {
                    options.push(line);
                }
                // Ki·ªÉm tra n·∫øu l√† answer
                else if (line.startsWith('Answer:')) {
                    answer = line.replace('Answer:', '').trim();
                }
            }
            
            // Ch·ªâ th√™m c√¢u h·ªèi n·∫øu c√≥ ƒë·ªß th√¥ng tin
            if (questionText && options.length >= 4 && answer) {
                questions.push({
                    id: questionId++,
                    question: questionText,
                    options: options,
                    answer: answer
                });
            }
        }
        
        // T·∫°o ƒë·ªëi t∆∞·ª£ng exam theo format chu·∫©n
        const examData = {
            id: 3,
            title: "ƒê·ªÅ s·ªë 3 - Tin h·ªçc c∆° b·∫£n",
            questions: questions
        };
        
        // Ghi ra file JSON v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
        fs.writeFileSync('exam-3.json', JSON.stringify(examData, null, 4), 'utf8');
        
        console.log(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!`);
        console.log(`üìù T·ªïng s·ªë c√¢u h·ªèi: ${questions.length}`);
        console.log(`üìÅ File ƒë∆∞·ª£c t·∫°o: exam-3.json`);
        
        // Hi·ªÉn th·ªã v√†i c√¢u h·ªèi ƒë·∫ßu ƒë·ªÉ ki·ªÉm tra
        console.log('\nüîç Xem tr∆∞·ªõc 3 c√¢u h·ªèi ƒë·∫ßu:');
        questions.slice(0, 3).forEach((q, index) => {
            console.log(`\nüìå C√¢u ${index + 1}: ${q.question}`);
            q.options.forEach(option => console.log(`   ${option}`));
            console.log(`   ‚úÖ ƒê√°p √°n: ${q.answer}`);
        });
        
        console.log('\nüéØ B·∫°n c√≥ th·ªÉ copy n·ªôi dung file exam-3.json v√†o exams.json!');
        
        return examData;
        
    } catch (error) {
        console.error('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi:', error.message);
        return null;
    }
}

// Ch·∫°y function chuy·ªÉn ƒë·ªïi
convertExamToJson();
